trigger:
- main

pool:
  name: LocalWindows  # Your self-hosted agent pool

variables:
- group: SonarQube
- name: SONARQUBE_PROJECT_KEY
  value: 'devops-pipeline-demo'
- name: SONARQUBE_PROJECT_NAME
  value: 'devops-pipeline-demo'
- name: SONARQUBE_HOST_URL
  value: 'http://localhost:9000'

steps:
# ✅ Checkout code properly
- checkout: self
  persistCredentials: true

# 🧹 Fix: Clean build reports to prevent permission errors (like access denied)
- task: PowerShell@2
  displayName: 'Clean build/reports and remove file locks'
  inputs:
    targetType: 'inline'
    script: |
      $folder = "$(System.DefaultWorkingDirectory)\src\build\reports"
      if (Test-Path $folder) {
        attrib -R "$folder\*" -Recurse
        Remove-Item -Path $folder -Recurse -Force -ErrorAction SilentlyContinue
      }

# 🛠️ Optional fallback: Set Git remote manually if not found
- script: |
    git remote add origin https://github.com/InnocentPerson/devops-pipeline-demo.git
    git fetch
  displayName: 'Fix Git Remote (only if needed)'
  condition: failed()

# 🔧 Gradle Build + SonarQube Analysis
- task: Gradle@2
  displayName: 'Gradle Build and SonarQube Analysis'
  inputs:
    gradleWrapperFile: 'src/gradlew.bat'
    workingDirectory: 'src'
    tasks: 'build sonarqube'
    options: >
      -Dsonar.projectKey=$(SONARQUBE_PROJECT_KEY)
      -Dsonar.projectName=$(SONARQUBE_PROJECT_NAME)
      -Dsonar.host.url=$(SONARQUBE_HOST_URL)
      -Dsonar.token=$(SONARQUBE_TOKEN)
      -Dsonar.gradle.skipCompile=true

# 📄 Generate Code Coverage Report
- task: ReportGenerator@5
  displayName: 'Generate Coverage Report'
  inputs:
    reports: '**/build/reports/jacoco/test/*.xml'
    targetdir: 'coverage-report'
    reporttypes: 'Html'

# ⬆️ Publish Code Coverage Report as Artifact
- task: PublishBuildArtifacts@1
  displayName: 'Publish Coverage Report'
  inputs:
    pathToPublish: 'coverage-report'
    artifactName: 'CodeCoverageReport'

# 🐳 Docker Build
- task: Docker@2
  displayName: 'Build Docker Image'
  inputs:
    containerRegistry: docker-hub-creds
    repository: 'striverr/devops-pipeline-demo'
    command: 'build'
    Dockerfile: 'src/Dockerfile'
    buildContext: 'src'
    tags: |
      latest
      $(Build.BuildId)

# 🚀 Docker Push
- task: Docker@2
  displayName: 'Push Docker Image'
  inputs:
    containerRegistry: docker-hub-creds
    repository: 'striverr/devops-pipeline-demo'
    command: 'push'
    tags: |
      latest
      $(Build.BuildId)
